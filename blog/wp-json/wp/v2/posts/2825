{"id":2825,"date":"2024-05-10T11:27:59","date_gmt":"2024-05-10T11:27:59","guid":{"rendered":"https:\/\/www.skillvertex.com\/blog\/?p=2825"},"modified":"2024-05-10T11:27:59","modified_gmt":"2024-05-10T11:27:59","slug":"difference-between-structure-and-union-in-c","status":"publish","type":"post","link":"https:\/\/www.skillvertex.com\/blog\/difference-between-structure-and-union-in-c\/","title":{"rendered":"Difference Between Structure And Union in C"},"content":{"rendered":"\n<div class=\"wp-block-rank-math-toc-block\" id=\"rank-math-toc\" id=\"rank-math-toc\"><p>Table of Contents<\/p><nav><ul><li ><a href=\"#difference-between-structure-and-union-in-c\">Difference Between Structure And Union in C<\/a><\/li><li ><a href=\"#similarities-between-structure-and-union\">Similarities Between Structure and Union<\/a><\/li><li ><a href=\"#difference-between-structure-and-union\">Difference between Structure and Union<\/a><\/li><li ><a href=\"#example\">Example<\/a><\/li><li ><a href=\"#faq-difference-between-structure-and-union-in-c\">FAQ- Difference Between Structure and Union in C<\/a><\/li><\/ul><\/nav><\/div>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"difference-between-structure-and-union-in-c\">Difference Between Structure And Union in C<\/h2>\n\n\n\n<ul class=\"wp-block-list\">\n<li><strong>Structures in C:<\/strong> Structures are user-defined data types in C that enable the combination of data items of different types into a single entity. They are often used to represent records or complex data structures.<\/li>\n\n\n\n<li><strong>Defining a Structure:<\/strong> To define a structure, you use the <code>struct<\/code> statement. This statement creates a new data type with one or more members, each of which can have its own data type. Structures allow you to encapsulate related data items within a single unit, providing organization and clarity to your data.<\/li>\n<\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code> union &#91;union name]\n    {\n       member definition;\n       member definition;\n       ...\n       member definition;\n    };\n   \n    (OR) \n\n    union &#91;union name]\n    {\n       member definition;\n       member definition;\n       ...\n       member definition;\n    }union variable declaration;<\/code><\/pre>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"similarities-between-structure-and-union\">Similarities Between Structure and Union<\/h2>\n\n\n\n<p>The shared and distinguishing features are given below:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li><strong>Shared Characteristics:<\/strong><\/li>\n<\/ul>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Both are user-defined data types.<\/li>\n\n\n\n<li>They store data of different types within a single unit.<\/li>\n\n\n\n<li>Members can be objects of any type, including other structures, unions, or arrays.<\/li>\n\n\n\n<li>Members can include bit fields for efficient memory usage.<\/li>\n\n\n\n<li>Both support the <code>=<\/code> (assignment) and <code>sizeof<\/code> operators.<\/li>\n\n\n\n<li>They require structures or unions in assignment to have the same members and member types.<\/li>\n\n\n\n<li>They can be passed by value to functions and returned by value by functions, provided the argument and function parameter have the same type.<\/li>\n\n\n\n<li>The &#8216;.&#8217; (dot) operator is used to access member variables in both structures and unions.<\/li>\n<\/ol>\n\n\n\n<p>These commonalities make structures and unions versatile for storing and organizing data. However, it&#8217;s essential to recognize that unions differ in how they allocate memory for members compared to structures. While structures allocate separate memory for each member, unions share the same memory location among members, allowing only one member to be active at any given time.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"difference-between-structure-and-union\">Difference between Structure and Union<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><\/td><td>Structure <\/td><td>Union<\/td><\/tr><tr><td>Keyword<\/td><td>The keyword struct functions to define a structure.<\/td><td>The union keyword functions to define union<\/td><\/tr><tr><td>Size <\/td><td>When variable is associated with structure,the compiler will allocate with the memory of each memory. The size of structure will be greater than or equal to the sum of its members<\/td><td>When Variable is assosiated with union,   the compiler will allocate the memory by checking the size of largest memeory.Hence, the size of union will be equal to size of largest member.<\/td><\/tr><tr><td>Memory<\/td><td>Each member within a structure will be assigned unique storage area of location.<\/td><td>Memory allocated will be shared by the individual members of union.<br><\/td><\/tr><tr><td>Value Alt<\/td><td>Altering the value of member cannot affect other members of the structure.<\/td><td>Altering the value of any of the member will automatically alter other member values.<\/td><\/tr><tr><td>Accessing members<\/td><td>Individual member will be accessed at any time.<\/td><td>Whereas, in union , we can see that only one member will be accessed.<\/td><\/tr><tr><td>Initializing of members<\/td><td>Several member of a structure will be initialized at once.  <\/td><td>Only the first member of union will be initialized.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"example\">Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>\n\/\/ C program to illustrate differences \n\/\/ between structure and Union \n  \n#include &lt;stdio.h&gt; \n#include &lt;string.h&gt; \n  \n\/\/ declaring structure \nstruct struct_example { \n    int integer; \n    float decimal; \n    char name&#91;20]; \n}; \n  \n\/\/ declaring union \n  \nunion union_example { \n    int integer; \n    float decimal; \n    char name&#91;20]; \n}; \nvoid main() \n{ \n    \/\/ creating variable for structure \n    \/\/ and initializing values difference \n    \/\/ six \n    struct struct_example s = { 18, 38, \"geeksforgeeks\" }; \n  \n    \/\/ creating variable for union \n    \/\/ and initializing values \n    union union_example u = { 18, 38, \"geeksforgeeks\" }; \n  \n    printf(\"structure data:\\n integer: %d\\n\"\n           \"decimal: %.2f\\n name: %s\\n\", \n           s.integer, s.decimal, s.name); \n    printf(\"\\nunion data:\\n integer: %d\\n\"\n           \"decimal: %.2f\\n name: %s\\n\", \n           u.integer, u.decimal, u.name); \n  \/\/ difference two and three \n    printf(\"\\nsizeof structure : %d\\n\", sizeof(s)); \n    printf(\"sizeof union : %d\\n\", sizeof(u)); \n  \n    \/\/ difference five \n    printf(\"\\n Accessing all members at a time:\"); \n    s.integer = 183; \n    s.decimal = 90; \n    strcpy(s.name, \"geeksforgeeks\"); \n  \n    printf(\"structure data:\\n integer: %d\\n \"\n           \"decimal: %.2f\\n name: %s\\n\", \n           s.integer, s.decimal, s.name); \n  \n    u.integer = 183; \n    u.decimal = 90; \n    strcpy(u.name, \"geeksforgeeks\"); \n  \n    printf(\"\\nunion data:\\n integer: %d\\n \"\n           \"decimal: %.2f\\n name: %s\\n\", \n           u.integer, u.decimal, u.name); \n  printf(\"\\n Accessing one member at time:\"); \n  \n    printf(\"\\nstructure data:\"); \n    s.integer = 240; \n    printf(\"\\ninteger: %d\", s.integer); \n  \n    s.decimal = 120; \n    printf(\"\\ndecimal: %f\", s.decimal); \n  \n    strcpy(s.name, \"C programming\"); \n    printf(\"\\nname: %s\\n\", s.name); \n  \n    printf(\"\\n union data:\"); \n    u.integer = 240; \n    printf(\"\\ninteger: %d\", u.integer); \n  \n    u.decimal = 120; \n    printf(\"\\ndecimal: %f\", u.decimal); \n  \n    strcpy(u.name, \"C programming\"); \n    printf(\"\\nname: %s\\n\", u.name); \n  \n    \/\/ difference four \n    printf(\"\\nAltering a member value:\\n\"); \n    s.integer = 1218; \n    printf(\"structure data:\\n integer: %d\\n \"\n           \" decimal: %.2f\\n name: %s\\n\", \n           s.integer, s.decimal, s.name); \nu.integer = 1218; \n    printf(\"union data:\\n integer: %d\\n\"\n           \" decimal: %.2f\\n name: %s\\n\", \n           u.integer, u.decimal, u.name); \n}\n<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>structure data:\n integer: 18\ndecimal: 38.00\n name: geeksforgeeks\n\nunion data:\n integer: 18\ndecimal: 0.00\n name: \u0012\n\nsizeof structure : 28\nsizeof union : 20\n\n Accessing all members at a time:structure data:\n integer: 183\n decimal: 90.00\n name: geeksforgeeks\n\nunion data:\n integer: 1801807207\n decimal: 277322871721159507258114048.00\n name: geeksforgeeks\n\n Accessing one member at time:\nstructure data:\ninteger: 240\ndecimal: 120.000000\nname: C programming\n\n union data:\ninteger: 240\ndecimal: 120.000000\nname: C programming\n\nAltering a member value:\nstructure data:\n integer: 1218\n  decimal: 120.00\n name: C programming\nunion data:\n integer: 1218\n decimal: 0.00\n name: \ufffd\u0004<\/code><\/pre>\n\n\n\n<p><strong>Time Complexity:<\/strong>&nbsp;O(1)<\/p>\n\n\n\n<p><strong>Auxiliary Space:<\/strong>&nbsp;O(1)<\/p>\n\n\n\n<h2 class=\"wp-block-heading\" id=\"faq-difference-between-structure-and-union-in-c\">FAQ- Difference Between Structure and Union in C<\/h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1697804124905\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q1. Why union is better than structure in C?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. In a union, only one element is used at a time because they share the same memory location. This is handy for storing data that can be of various types. In a struct, each element has its own memory space, and all can be used simultaneously. Structures are suitable for data with multiple elements of different types.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1697804136329\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q2. Which is greater size of struct and union?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. <strong>Structure Size:<\/strong> A structure&#8217;s size is the sum of its data members&#8217; sizes and any required padding for alignment.<br \/><strong>Union Size:<\/strong> The size of a union is equal to the size of its largest data member, and only the most recently initialized member holds a value.<\/p>\n\n<\/div>\n<\/div>\n<div id=\"faq-question-1697804143649\" class=\"rank-math-list-item\">\n<h4 class=\"rank-math-question \">Q3. What is the difference between structure and union which is faster?<\/h4>\n<div class=\"rank-math-answer \">\n\n<p>Ans. Your explanation succinctly highlights the key points about unions:<br \/><strong>Memory Efficiency:<\/strong> Unions consume less memory compared to structures because they allocate space only for their largest data member.<br \/><strong>Direct Access to the Largest Member:<\/strong> When using a union, you can directly access the memory allocated for the largest data member.<br \/><strong>Efficient Memory Usage:<\/strong> Unions are ideal when you want to conserve memory and use the same memory location for different data members, depending on the active member.<\/p>\n\n<\/div>\n<\/div>\n<\/div>\n<\/div>","protected":false},"excerpt":{"rendered":"<p>Difference Between Structure And Union in C Similarities Between Structure and Union The shared and distinguishing features are given below: These commonalities make structures and unions versatile for storing and organizing data. However, it&#8217;s essential to recognize that unions differ in how they allocate memory for members compared to structures. While structures allocate separate memory &#8230; <a title=\"Difference Between Structure And Union in C\" class=\"read-more\" href=\"https:\/\/www.skillvertex.com\/blog\/difference-between-structure-and-union-in-c\/\" aria-label=\"More on Difference Between Structure And Union in C\">Read more<\/a><\/p>\n","protected":false},"author":4,"featured_media":2826,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"footnotes":""},"categories":[27],"tags":[],"class_list":["post-2825","post","type-post","status-publish","format-standard","has-post-thumbnail","hentry","category-c-programming","generate-columns","tablet-grid-50","mobile-grid-100","grid-parent","grid-33"],"_links":{"self":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2825"}],"collection":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/users\/4"}],"replies":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/comments?post=2825"}],"version-history":[{"count":8,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2825\/revisions"}],"predecessor-version":[{"id":10739,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/posts\/2825\/revisions\/10739"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media\/2826"}],"wp:attachment":[{"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/media?parent=2825"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/categories?post=2825"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.skillvertex.com\/blog\/wp-json\/wp\/v2\/tags?post=2825"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}